% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Randomization_functions.R
\name{randomize_asymmetric_hierarchical}
\alias{randomize_asymmetric_hierarchical}
\title{Maximise pairwise and community asymmetry}
\usage{
randomize_asymmetric_hierarchical(it, ij_col, ji_col)
}
\arguments{
\item{it}{interaction table (created by interaction_strengths())}

\item{ij_col}{column of a_ij values to randomise (choose scaled or unscaled)}

\item{ji_col}{column of a_ji values to randomise (scaled or unscaled)}
}
\value{
Interaction table with additional columns \emph{$a_ij_asym_h} and \emph{$a_ji_asym_h},
containing randomised interaction strengths
}
\description{
During this randomisation procedure, all interaction strengths are reordered to
make the 2-link loops in the randomised system as asymmetric as possible. To do this,
all links are ordered by size. Then, the very strongest link is paired with the
weakest one, the second strongest with the second weakest etc. The location of
pairwise interactions in the network is chosen randomly (but network topology
is preserved- off-diagonal zeros remain in place).
}
\details{
To also maximise community asymmetry, the stronger link of each interaction
is placed below the diagonal of the matrix (aji column), while all weaker links
are placed above the diagonal (aji column).

The function returns a new interaction table that contains two new columns
\emph{$a_ij_asym_h} and \emph{$a_ji_asym_h} that contains the same values as the original
columns but in a different order.

To get a Jacobian matrix with maximised pairwise asymmetry, use assemble_jacobian() and specify
the new columns.
}
